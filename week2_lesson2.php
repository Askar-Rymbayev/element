<?php
//<editor-fold desc="СОДЕРЖИМОЕ">
/*
 - Github
 - Арифметические операторы
 - Операторы инкремента и декремента
 - Логические операторы, Приоритет оператора
 - СРАВНЕНИЕ
 - КОНСТАНТЫ
 - ИНТЕРПОЛЯЦИЯ (фигурные скобки внутри двойных кавычек)
 - ФУНКЦИИ
 - ПОНЯТНЫЕ ИМЕНА
 - IF
*/
//</editor-fold>

//<editor-fold desc="Github">
/*
Что такое Git и зачем он нужен?
Git - распределённая система контроля версий, которая даёт возможность разработчикам отслеживать изменения в файлах и работать над одним проектом совместно с коллегами. Чаще всего его используют для кода, но можно и для других файлов. Например, для картинок - полезно для дизайнеров.

Она была разработана в 2005 году Линусом Торвальдсом, создателем Linux, чтобы другие разработчики могли вносить свой вклад в ядро Linux.

С помощью Git-a вы можете откатить свой проект до более старой версии, сравнивать, анализировать или сливать свои изменения в репозиторий.

Репозиторий Git — это место, где хранится ваш код и вся информация о его изменениях. Репозитории могут находиться у вас на компьютере, на компьютерах ваших коллег и на удалённом сервере.

Так же ваши репозитории можно хранить и в интернете. Популярные сервисы:
GitHub
Bitbucket
GitLab

Каждая точка сохранения вашего проекта носит название коммит (commit). У каждого commit-a есть hash (уникальный id) и комментарий. Из таких commit-ов собирается ветка. Ветка - это история изменений. У каждой ветки есть свое название. Репозиторий может содержать в себе несколько веток, которые создаются из других веток или вливаются в них.
*/
//</editor-fold>

//<editor-fold desc="Арифметические операторы">
/*
$a + $b
$a - $b
$a * $b
$a / $b
$a % $b
$a ** $b
*/
//</editor-fold>

//<editor-fold desc="Операторы инкремента и декремента">
/*
++$a
$a++
--$a
$a--
*/
//echo "<h3>Постфиксный инкремент</h3>";
//$a = 5;
//echo "Должно быть 5: " . $a++ . "<br />\n";
//echo "Должно быть 6: " . $a . "<br />\n";
//
//echo "<h3>Префиксный инкремент</h3>";
//$a = 5;
//echo "Должно быть 6: " . ++$a . "<br />\n";
//echo "Должно быть 6: " . $a . "<br />\n";
//
//echo "<h3>Постфиксный декремент</h3>";
//$a = 5;
//echo "Должно быть 5: " . $a-- . "<br />\n";
//echo "Должно быть 4: " . $a . "<br />\n";
//
//echo "<h3>Префиксный декремент</h3>";
//$a = 5;
//echo "Должно быть 4: " . --$a . "<br />\n";
//echo "Должно быть 4: " . $a . "<br />\n";

//</editor-fold>

//<editor-fold desc="Логические операторы, Приоритет оператора">
/*
$a and $b - true, если и $a, и $b true.
$a or $b - true, если или $a, или $b true.
$a xor $b - true, если $a, или $b true, но не оба.
! $a - true, если $a не true.
$a && $b - true, если и $a, и $b true.
$a || $b - true, если или $a, или $b true.

*//*
// "||" имеет больший приоритет, чем "or"

// Результат выражения (false || true) присваивается переменной $e
// Действует как: ($e = (false || true))
$e = false || true;

// Константа false присваивается $f, а затем значение true игнорируется
// Действует как: (($f = false) or true)
$f = false or true;

var_dump($e, $f);


// "&&" имеет больший приоритет, чем "and"

// Результат выражения (true && false) присваивается переменной $g
// Действует как: ($g = (true && false))
$g = true && false;

// Константа true присваивается $h, а затем значение false игнорируется
// Действует как: (($h = true) and false)
$h = true and false;

var_dump($g, $h);*/

//-------------------------------------
//print_r(true);   // => 1
//print_r(false);  // => (на экран выводится пустая строка)
//print_r(0 || 1); // => 1
/*
Оператор ИЛИ работает только с типом bool, но ему даны числа 1 и 0.

0 преобразуется в false, а 1 преобразуется в true.
Результат false || true — это true.
Теперь print_r() получает true, но он работает только со строками (не с bool).
true преобразуется в 1.
И на экран выводится 1.
*/
//</editor-fold>

//<editor-fold desc="СРАВНЕНИЕ">
/*
Сравнивать можно не только числа
Практически везде используется, для входа на сайт, введенные логин пароль, если такой есть в БД то аутентифицируем
Так как во многих ЯП знак = используется как присвоение, то для равенства используются == и ===
Список операций сравнения:
< меньше
<= меньше или равно
> больше
>= больше или равно
== гибкое сравнение
=== строгое сравнение
!= гибкое не равно
!== строгое не равно

Результат выражения "сравнения" всегда логическое значение true или false
*/
//$result = 9 > 3;
//print_r($result);
//echo '<br>';
//print_r('five' !== 'five'); // => false
//echo '<br>';
//var_dump('' === false); // => false
//var_dump('' == false);  // => true
/*
Проверка на чётность % odd/even
*/
//var_dump(11 % 2 == 0);
//</editor-fold>

//<editor-fold desc="КОНСТАНТЫ">
/*
 - КОНСТАНТЫ

начинается с ключевого слова const затем имя константы
знак доллара не нужен
Далее ей присваивается нужное значение
наименование буквами в верхнем регистре с знаком _ в качестве разделителя
можно использовать в любом выражении
константу нельзя изменить
много встроенных констант
*/
//echo 'текущая версия PHP: ' . PHP_VERSION .'<br>';
//echo 'максимальная разрешенная длина имени файла: ' . PHP_MAXPATHLEN . '<br>';
//echo 'максимальное возможное значение целых чисел (integer): ' . PHP_INT_MAX;

// магические константы
// - их нельзя определить самому, только пользоваться
// - начинаются и заканчиваются символами __(два подчеркивания)
// - магия заключается в том, что такие константы имеют одно и то же значение только в пределах определенной части программы

//echo 'содержит текущую строку файла, в котором она используется: ' . __LINE__ .'<br>';
//echo 'путь до текущего файла: ' . __FILE__ . '<br>';
//echo 'путь до директории, в которой находится текущий файл: ' . __DIR__ . '<br>';
//
//const AGE_OF_BABY = 5;
//function generate()
//{
//    return AGE + 3;
//}
//$result = generate();
//print_r($result); // => 8

//</editor-fold>

//<editor-fold desc="Интерполяция - шаблон (template)">
//$answer = 'SpongeBob SquarePants';
//$question = 'Who lives in a pineapple under the sea?';
//
//print_r($question . ", " . $answer . "!");
//echo '<br>';
//print_r("{$question}, {$answer}!");
//</editor-fold>

//<editor-fold desc="Функции">
/*
Функции — одна из ключевых конструкций в программировании, без них невозможно сделать практически ничего
Аргументы
В скобках может быть любое количество аргументов, а иногда — вообще ни одного
Пример функции, которая не принимает аргументов
rand() - генерирует и возвращает случайное число
*/
//echo rand();
//3 + 5; // 8 ОПЕРАТОР сложения
//sum(3, 5); // 8 ФУНКЦИЯ сложения
/*
Операторы и функции — это одно и то же
Разница только в том, как они записываются
------------------------------------------

Определение функции
pow - возведит в степень
Принимает 2 аргумента (параметра)
Первый какое число возводить, второй в какую степень возводить
При вызове без параметров выведет ошибку:
Warning: pow() expects exactly 2 parameters, 0 given in mysite.loc\week2_lesson2.php on line 88
*/
//echo pow(2,2) . '<br>';// функция
//echo 2 ** 2;// оператор
/*
Автор данной функции создал её с 2-мя обязательным аргументами
Оба аргумента числовые, и возвращает число
------------------------------------------

Другие функции имеют другое кол-во аргументов и возвращаемый тип значения
Для того чтобы определить какое кол-во аргументов, какие у них типы и тип возвращаемого значения нам достаточно обратиться к документации этой функции
Порядок аргументов также важен
------------------------------------------

Рассмотрим ещё одну функцию - round

round(int|float $num, int $precision = 0, int $mode = PHP_ROUND_HALF_UP): float

второй и третий аргумент необязательные, и у них есть значение по умолчанию
*/
//echo round(10.25, 0);

// можно не указывать второй аргумент, результат такой же
//echo round(10.25);

/*
Не обязательные аргументы идут после обязательных
Когда будем писать свои функции, эти знания вам сильно помогут
------------------------------------------

Ещё один небольшой пример:
*/
//$str = 'I love development';
//$index = strpos($str, 'd');
//
//$lastWord = substr($str, $index, strlen($str) - $index);
//echo $lastWord;
//
//echo substr($str, $index);
/*
------------------------------------------
Параметры (аргументы) могут быть с динамичным количеством, как например max/min

https://www.php.net/manual/ru/function.max.php

max(mixed $value, mixed ...$values): mixed
min(mixed $value, mixed ...$values): mixed
*/
//echo max(1, 10, 3); // 10
//echo max(1, -3, 2, 3, 2); // 3
/*
------------------------------------------

Стандартная библиотека
Тысячи функций, учить наизусть не надо
Подразумеваем что программист сам понимает где искать мануалы, и как им пользоваться
Как это звучит для новичка: Сходи туда, не знаю куда, принеси то, не знаю что
Как узнавать про функции из стандартной библиотеки новичку? когда он ничего не знает
Всё происходит в процессе профессионального взросления, он находит функции которые решают его конкретные задачи самым лучшим образом

Советы:
 - четко отслеживайте, с чем вы сейчас работаете, какой тип данных. Почти всегда вы найдете необходимую функцию в соответствующем разделе документации, например, для работы со строками нужно изучать строковые функции
 - время от времени открывайте раздел со стандартными функциями по изучаемой тематике и просто пробегайтесь по ним, изучая определение и способы использования
 - чаще читайте чужой код, особенно код библиотек, которые вы будете использовать
 */
//</editor-fold>

//<editor-fold desc="ПОНЯТНЫЕ ИМЕНА ПЕРЕМЕННЫХ">
/*
Часто при именовании пременных нам нужно заложить в него смысл, что хранит в себе эта переменная, и оно может быть составным, то есть состоять из нескольких слов
Используются разные стили написания названия перменных

 snake_case — используется знак подчёркивания "_" (англ. underscore): price_with_discount
 CamelCase — каждое слово начинается с большой букы: PriceWithDiscount
 lowerCamelCase — каждое слово начинается с большой букы, кроме первой: priceWithDiscount

Для переменных лучше использовать lowerCamelCase
Так как мы будем использовать Laravel, в исходниках фреймворка я нашёл такое именование: $redirectToRoute

Желательно именуйте именно на английском, никакого транслита: $cenaSPromoCodom
Пользуйтесь Google Translater-ом, постепенно у вас будет пополняться словарный запас, прокачается английский
------------------------------------------

Именование функций
Такой же как и стиль именования переменных: lowerCamelCase
Функция выполняет действие (глагол), поэтому называть лучше в стиле "сделай": посчитай, положи, выведи, запиши и тп
Переменная — это сущность (существительное): $user, $result, $price, $connection
Это не строгое правило, но оно облегачает путь вначале пути

PhpStorm + PSR (code style)
Ctr+Alt+L

Примеры:
*/
// ниже пример вроде ок, НО!
//$tengeCount = 1000;
//$dollarsCount = $tengeCount * 465;
//
//print_r("I have {$tengeCount} tg, or {$dollarsCount} usd");

//------------------------------------------

// вот тут пример по лучше, понятнее, лаконичнее
//$tengePerDollar = 465;// стоимость 1 доллара в тенге
//$dollarsCount = 1000;
//$tengeCount = $dollarsCount * $tengePerDollar;
//
//print_r("I have {$tengeCount} tg, or {$dollarsCount} usd");
//</editor-fold>

//<editor-fold desc="IF">
/*
if (выражение)
  инструкция
*/
//$a = 1;
//$b = 0;
//if ($a > $b) {
//    echo "a больше b";
//}
//
//if ($a > $b) {
//    echo "a больше b";
//    $b = $a;
//}
//
//
//if ($a > $b) {
//    echo "a больше, чем b";
//} else {
//    echo "a НЕ больше, чем b";
//}
//
//
//$a = false;
//$b = true;
//if ($a) {
//    if ($b) {
//        echo "b";
//    } else {
//        echo "c";
//    }
//}
//
//
//if ($a > $b) {
//    echo "a больше, чем b";
//} elseif ($a == $b) {
//    echo "a равен b";
//} else {
//    echo "a меньше, чем b";
//}

// вы также можете написать 'else if' (в два слова), и тогда поведение будет идентичным 'elseif'
//$a = 5;
?>

<?php //if ($a == 5): ?>
<!--    A равно 5-->
<?php //endif; ?>

<?php
//$a = 5;
//if ($a == 5):
//    echo "a равно 5";
//    echo "...";
//elseif ($a == 6):
//    echo "a равно 6";
//    echo "!!!";
//else:
//    echo "a не равно ни 5 ни 6";
//endif;
//</editor-fold>
