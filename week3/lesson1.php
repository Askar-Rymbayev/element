<?php

/*
Домашнее задание
Тема phpstorm: светлая/темная
*/

//echo mb_strtoupper('Τάχιστη αλώπηξ βαφής ψημένη γη, δρασκελίζει υπέρ νωθρού κυνός');
//if (mb_strpos('expecto patronum', 'patronum')) { // 6
//    // ...
//}

//if (mb_strpos('expecto patronum', 'expecto')) { // 0
//    // ...
//}

/*
В unix подобных операционных системах (Linux, Unix, MacOS) системное время представляется в формате Unix time
Это количество секунд, прошедших с (00:00:00 UTC) 1 января 1970 года
Время с этого момента называют «эрой Unix» (Unix Epoch)
Unix-время представлено целым числом, оно увеличивается с каждой прошедшей секундой

Конкретная дата в формате Unix time называется timestamp
Для получения текущего timestamp в PHP используется функция time()

*/
//echo time();
/*
-------------------------------------

Date
Для работы с датой есть функция date
Она конвертирует timestamp в человекочитаемый формат
*/
//echo date('Y');
/*
функция по умолчанию использует текущее время
но можно ей дать конкретное время
*/
//echo date('M', time());
/*
для первого аргумента этой функции есть множества готовых форматов (смотреть в документации)
-------------------------------------

mktime()
генерирует timestamp по переданным аргументам (часы, минуты, секунды, число, месяц, год)
*/
//echo mktime(0, 0, 0, 11, 21, 2022);
//echo date('H:i:s d.M.Y', mktime(0, 0, 0, 12, 21, 2022));
//$ts = strtotime('next Thursday', strtotime('28 february 2023'));//28 февраля 2023
//echo $ts .' = ' . date('H:i:s d.M.Y', $ts);
/*
-------------------------------------

Часовые пояса (тайм зоны)
Всеми́рное координи́рованное вре́мя - стандарт, по которому общество регулирует часы и время
UTC было введено вместо устаревшего среднего времени по Гринвичу (GMT)
UTC основана на равномерной шкале атомного времени
Часовые пояса вокруг земного шара выражаются, как положительное или отрицательное смещение от UTC

Алматы (Астана, Новосибирск) +6
Москва +3

Главное правило при работе с датами — хранить и сравнивать в UTC формате. А выводить лучше в той зоне, в которой живет пользователь

Установить зону функцией date_default_timezone_set().

Список поддерживаемых часовых поясов - https://www.php.net/manual/ru/timezones.php

*/
//echo '<pre>';
//date_default_timezone_set('UTC');
//echo 'UTC: ' . date('H:i:s d.m.Y').'<br>';
//
//date_default_timezone_set('Asia/Almaty');
//echo 'Asia/Almaty: ' . date('H:i:s d.m.Y') . '<br>';
//
//date_default_timezone_set('Asia/Aqtau');
//echo 'Asia/Aqtau: ' . date('H:i:s d.m.Y') . '<br>';
//
//date_default_timezone_set('Europe/Moscow');
//echo 'Europe/Moscow: ' . date('H:i:s d.m.Y') . '<br>';
//
//date_default_timezone_set('Asia/Tokyo');
//echo 'Asia/Tokyo: ' . date('H:i:s d.m.Y') . '<br>';
//echo '</pre>';
/*
-------------------------------------

Отладка
Программисту необходимо развивать навык отладки, как можно раньше
Первое, что понадобится — минимальное знание английского языка и умение пользоваться словарем
Сообщения об ошибках - всегда на английском
Не пытайтесь отгадывать или менять код методом тыка
Прочитайте сообщение об ошибке, поймите его — это ключевое действие

Error: Call to undefined function App\Models\func()

/var/www/app/src/Models.php:5
/var/www/app/tests/ModelsTest.php:12
/var/www/app/index.php:2


При возникновении ошибок, выводится 2 вещи: сама ошибка и бэктрейс
Бэктрейс - информация со списком файлов, функций и строка в файле, через которые проходит интерпретатор от начала выполнения скрипта (index.php), до того места где возникла ошибка
Сама отладка состоит из 2-х вещей
1. понять сообщение с ошибкой, о чём идёт речь
2. найти в бэктрейсе место возникновения ошибки

В бэктрейсе информация хранится в обратном порядке, с места возникновения ошибки, до самого первого файла (index.php)
Выводится путь к файлу, функция, в которую передано управление, строка на которой вызывалась функция, и даже бывает частично значения аргументов или тип
-------------------------------------

Ошибки бывают следующими
Синтаксические - не корректно написан код
Например забыли точку с запятой
В таких ошибки содержится текст: parse error или syntax error
Их обычно исправить проще

PHP Parse error:  syntax error, unexpected '}' in /var/www/app/src/Models.php on line 4

Увидели в каком файле возникла ошибка, на какой строке, внимательно посмотрели на код и пофиксили

Также есть ошибки связанное с программированием, которые немного сложнее исправить
- Вызов несуществующей функции
- Использование необъявленной переменной
- Передача неверных аргументов в функции, например, аргументов, имеющих неверный тип

Они возникают при неправильной логике кода


Есть ещё логические ошибки
В этом случае программа отработает без вывода ошибок, но выдаст не правильный результат
Результат не всегда может выдавать не правильный результат, по этой причине бывает сложно понять что в коде есть ошибка
-------------------------------------

Рассмотрим пример
Ниже должен быть код, который суммирует все числа от $start до $end
То есть, если
$start = 2
$end = 5

Код должен посчитать: 2 + 3 + 4 + 5

*/
//function sum($start, $end)
//{
//    $result = 0;
//    for ($i = $start; $i < $end; $i++) {
//        $result += $i;
//    }
//
//    return $result;
//}
/* 2 + 3 + 4 + 5
Прочитайте код внимательно, дайте ответ, выполняет ли данный код нашу задачу?





Отличие опытных программистов и новичков

Посмотреть какие переменные меняются в цикле, посмотреть какие значения им присваивается

Для отслеживания значений в переменных в ходе выполнения кода, можно использовать отладчик (xdebug)
Либо самый простой спобособ, использовать печать значения перменных (print_r, var_dump)
*/
//function sum($start, $end)
//{
//    $result = 0;
//    for ($i = $start; $i <= $end; $i++) {
//        print_r('<hr>');
//        print_r('$i = '.$i.'<br>');
//        $result += $i;
//        print_r('$result = '.$result.'<br>');
//    }
//
//    return $result;
//}
//
//sum(2, 5);
/*
 *
 *
 *
-------------------------------------

Подключение файлов
Обычно проекты на php содержат более тысячи кода, а то и сотни тысяч
В таком случае записывать весь код в один файл будет совсем не продуктивно
Для этого нужно разбивать код по файлам
На данный момент мы изучим несколько функций, которые позволяют подключать файлы с php кодом, и использовать код от туда
include
include_once
require
require_once
*/
//require_once 'variables.php';
//
//echo $integer .'<br>';
/*
в данном месте нам становятся доступными переменные из файла "variables.php"
*/
//require_once 'print2.php';
//require_once 'print3.php';
//
//print_r('Current file: '.__FILE__.':'.__LINE__);
/*
Получается что сначала выполняется код, находящийся внутри print.php, затем продолжится выполнение кода внутри текущего файла

Из всех 4-х функций, лучше всего использовать require_once, почему?
Если файл не существует, то выдаётся ошибка, и программа остановит свое выполнение
Если в require_once передается файл, который уже был где-то загружен ранее, то файл не будет выполнять этот файл повторно, но код этого файла все равно станет доступным

Отличие других от require_once:
require исполняет включаемый файл каждый раз
include и include_once не приводят к ошибке в ситуации, когда файл не существует

-------------------------------------

Завершение урока

Есть ли вопросы по пройденному уроку?
Рефлексия (1-10)
Ещё один вопрос, про Git
*/